인터페이스 (interface)
	- 앞에 interface 키워드 붙여 선언
	- 메서드 선언만 있고 구현은 없는 추상 메서드 포함함
	    인터페이스에 선언한 메서드는 abstract 붙이지 않아도 자동으로 추상 메서드로 인식
	- 디폴트 메서드 포함 가능
		(디폴트 메서드 :
			- 메서드 동작 구현된 메서드
			- 앞에 default 키워드
			- default 키워드 붙지 않으면 추상 메서드로 인식
			- 인터페이스를 구현한 클래스에서 오버라이딩할 수 있음
			- 구현 클래스 기존 구조와 동작을 망가뜨리지 않으면서 새 기능 추가 가능)
	- 정적 메서드 포함 가능
		(정적 메서드 :
			- 앞에 static 키워드
			- 인터페이스 이름으로 직접 호출 가능
			- 동작 구현돼 있지만, 구현 클래스에서 오버라이딩 할 수 x)
	- 상수만 포함할 수 있음
		- 인터페이스에 필드 선언 시 자동으로 public , static, final 키워드 붙음
		- 해당 상수에 접근할 때 인터페이스명 사용
	- 접근 제한자로 public과 접근 제한자를 명시하지 않는 default만 사용 가능
	
		[접근 제한자] interface 인터페이스명 {
			자료형 변수명 = 값; // 상수
			반환형 메서드명 (매개변수1, 매개변수2...) {}; // 추상 메서드
			default 반환형 메서드명 (매개변수1, 매개변수2...) {}; // 디폴트 메서드
			static 반환형 메서드명 (매개변수1, 매개변수2..._ {}; // 정적 메서드
		}
		
	- 추상 클래스와 마찬가지로 직접 객체 생성 x
		- 구현 클래스에서 객체 생성하고 객체에서 인터페이스를 자료형으로 선언할 수 있음
		- 구현 클래스에서는 implements 키워드로 구현할 인터페이스 명시
		- 이미 다른 클래스 상속받은 상태라면 구현할 인터페이스를 부모 클래스 뒤에 추가
		- 인터페이스 여럿이라면 쉼표로 구분해 작성
		
		class 클래스명 implements 인터페이스명 {}
		class 자식 클래스명 extends 부모 클래스명 implements 인터페이스1, 인터페이스2 {}
		
	- 인터페이스끼리 상속 가능
		- 구현 아닌 상속 개념이므로 implements 대신 extends 키워드 사용
		
		interface 자식 인터페이스명 extends 부모 인터페이스 {}