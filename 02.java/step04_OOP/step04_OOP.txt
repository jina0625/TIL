OOP : Object Oriented Programming 객체 지향 프로그래밍
		객체 관점에서 프로그래밍 하는 것
		- 캡슐화
		- 추상화
		- 상속
		- 다형성
		
=====================================================
1. API(Application Programming Interface)
	- 라이브러리(Library)라고도 함
	- 프로그램 개발 위해 제공되는 클래스 및 인터페이스 모음
	- String, System, ...
	- 주로 java.lang, java.util, java.time 패키지 사용

2. 상속(Inheritance)
	- 부모가 자식에게 물려주는 행위
			- 상속하는 클래스 : 상위, parent, super, base
			- 상속 받는 클래스 : 하위, child, sub, derived
	- 클래스 구성요소 "변수"와 "메소드"만 상속
	- java.lang.Object : 모든 클래스 최상위
	- 필요성 : 기존 구현 코드 상속 받아 사용(재사용성 -> 개발 속도 향상), 필요 속성 or 기능 확장 개발(확장성)
	- 제약 : 자식 = 부모 관계에서만 성립
	- 문법
		class 자식 클래스명 extends 부모 클래스명 {
			변수, 메소드만 상속
			자식만의 변수, 메소드 추가 개발 기능
		}
	- 자동 생성되는 코드
			- 클래스 선언구 (extends Object)
			- 생성자
				미구현시 자동으로 추가
				생성자별 첫 라인에 부모 생성자 '호출' : super();
	- 메소드 재정의(오버라이딩 overriding / override)
			- ** 반환타입 메소드명 argument list 100% 동일
			- {} body 부분 수정
			- 부모 메소드 로직 그대로 반영해 자식에게 사용 시, super()
	- 키워드
		super
			- 하위 클래스에서 가지는 상위 클래스에 대한 참조 값
			- super() : 상위 클래스 기본 생성자 호출
			- 상위 클래스 인스턴스 참조값 가지므로 상위 클래스 메서드 or 멤버변수에 접근 가능
			
3. 추상 클래스 (Abstract Class)		
	- abstract 명령 키워드 사용
	- 메서드 선언만 있는 추상 메서드 포함한 클래스
		ex) public int add(int x, int y)
	- new 사용 불가능 (객체 생성 불가능)
	- 응용 : 템플릿 메서드 패턴
				- 코드 시나리오 정의하는 메서드
				- ** final로 선언해 하위 클래스에서 재정의 할 수 없게 함	
				- 프레임 워크에서 많이 사용하는 설계 패턴
				- 상위 클래스에서 전체 흐름 정의 한 뒤 하위에서 다르게 구현하도록 함
	- 장점 : 통일화된 사용 방법 제안 가능
	
4. 인터페이스
	- interface 명령 키워드 사용
	- 모든 필드는 public static final
	- 모든 메소드는 public abstract
	- ** 다중 상속 가능
					
					